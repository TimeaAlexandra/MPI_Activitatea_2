
//Rezolutie----------------------

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

using Clause = vector<int>;
using Formula = vector<Clause>;

bool has_complementary(const Clause& c1, const Clause& c2, int& pivot) {
    for (int l1 : c1) {
        for (int l2 : c2) {
            if (l1 == -l2) {
                pivot = l1;
                return true;
            }
        }
    }
    return false;
}

Clause resolve(const Clause& c1, const Clause& c2, int pivot) {
    set<int> result;
    for (int l : c1) if (l != pivot) result.insert(l);
    for (int l : c2) if (l != -pivot) result.insert(l);
    return Clause(result.begin(), result.end());
}

bool resolution(const Formula& original) {
    set<Clause> known_clauses(original.begin(), original.end());  
    Formula new_clauses;

    while (true) {
        new_clauses.clear();
        vector<Clause> clauses(known_clauses.begin(), known_clauses.end());

        for (size_t i = 0; i < clauses.size(); ++i) {
            for (size_t j = i + 1; j < clauses.size(); ++j) {
                int pivot;
                if (has_complementary(clauses[i], clauses[j], pivot)) {
                    Clause resolvent = resolve(clauses[i], clauses[j], pivot);

                    if (resolvent.empty()) {
                        cout << "Clauza vidă obținută => formula este NESATISFIABILĂ\n";
                        return false;
                    }

                    if (known_clauses.insert(resolvent).second) {
                        new_clauses.push_back(resolvent);
                    }
                }
            }
        }

        if (new_clauses.empty()) break;
    }

    cout << "Nu s-a putut obține clauza vidă => formula este SATISFIABILĂ\n";
    return true;
}

//DP------------------------

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

using Clause = vector<int>;
using Formula = vector<Clause>;

bool containsEmptyClause(const Formula& formula) {
    for (const auto& clause : formula) {
        if (clause.empty()) return true;
    }
    return false;
}

Formula applyResolution(const Formula& formula, int variable) {
    Formula result;
    for (const auto& c1 : formula) {
        if (find(c1.begin(), c1.end(), variable) == c1.end()) continue;
        for (const auto& c2 : formula) {
            if (find(c2.begin(), c2.end(), -variable) == c2.end()) continue;

            set<int> resolvent;
            for (int l : c1) if (l != variable) resolvent.insert(l);
            for (int l : c2) if (l != -variable) resolvent.insert(l);

            result.push_back(Clause(resolvent.begin(), resolvent.end()));
        }
    }
    return result;
}

Formula removeClausesWith(const Formula& formula, int variable) {
    Formula result;
    for (const auto& clause : formula) {
        if (find(clause.begin(), clause.end(), variable) != clause.end()) continue;
        if (find(clause.begin(), clause.end(), -variable) != clause.end()) continue;
        result.push_back(clause);
    }
    return result;
}

set<int> getVariables(const Formula& formula) {
    set<int> vars;
    for (const auto& clause : formula)
        for (int lit : clause)
            vars.insert(abs(lit));
    return vars;
}

bool davisPutnam(Formula formula) {
    if (formula.empty()) return true; 
    if (containsEmptyClause(formula)) return false; 

    set<int> vars = getVariables(formula);
    if (vars.empty()) return true;

    int variable = *vars.begin();

    Formula resolved = applyResolution(formula, variable);
    Formula reduced = removeClausesWith(formula, variable);

    Formula next = reduced;
    next.insert(next.end(), resolved.begin(), resolved.end());

    return davisPutnam(next);
}

//DPLL------------------

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

using Clause = vector<int>;
using Formula = vector<Clause>;

bool containsEmptyClause(const Formula& formula) {
    for (const auto& clause : formula)
        if (clause.empty()) return true;
    return false;
}

Formula simplifyFormula(const Formula& formula, int literal) {
    Formula result;
    for (const auto& clause : formula) {
        if (find(clause.begin(), clause.end(), literal) != clause.end())
            continue;
        Clause newClause;
        for (int l : clause)
            if (l != -literal)
                newClause.push_back(l);
        result.push_back(newClause);
    }
    return result;
}

bool unitPropagation(Formula& formula, map<int, bool>& assignment) {
    bool changed;
    do {
        changed = false;
        for (const auto& clause : formula) {
            if (clause.size() == 1) {
                int lit = clause[0];
                assignment[abs(lit)] = lit > 0;
                formula = simplifyFormula(formula, lit);
                changed = true;
                break;
            }
        }
    } while (changed);
    return true;
}

set<int> getUnassignedVars(const Formula& formula, const map<int, bool>& assignment) {
    set<int> vars;
    for (const auto& clause : formula)
        for (int lit : clause)
            if (assignment.find(abs(lit)) == assignment.end())
                vars.insert(abs(lit));
    return vars;
}

bool DPLL(Formula formula, map<int, bool> assignment) {
    unitPropagation(formula, assignment);
    if (formula.empty()) return true;
    if (containsEmptyClause(formula)) return false;

    set<int> vars = getUnassignedVars(formula, assignment);
    if (vars.empty()) return true;

    int var = *vars.begin();

    auto assign1 = assignment;
    assign1[var] = true;
    if (DPLL(simplifyFormula(formula, var), assign1)) return true;

    auto assign0 = assignment;
    assign0[var] = false;
    if (DPLL(simplifyFormula(formula, -var), assign0)) return true;

    return false;
}


